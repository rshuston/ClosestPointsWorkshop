
##### Permutation:

order matters
nPr = P(n,r)
    = n! / (n-r)!

O(n!)


##### Combination:

order does not matter
nCr = C(n,r)
    = P(n,r) / r!
    = n! / ((n-r)! * r!)
"n choose r" is also the binomial coefficient

O(n!)/r!


##### Plane Sweep:

O(n log n)

Given points[]
Generate pointsSortedByX[]
Set best point pair to pointsSortedByX[0] and pointsSortedByX[1]
for index in 2..<pointsSortedByX.count {
    Scan backwards through pointsSortedByX[] from index until x-distance is greater than "best so far", excluding points whose y-distance is also greater than "best so far"
    Find closest points in array slice
    If better than "best so far" then keep the found point pair
}



##### Divide and Conquer:

O(n log n)

Given points[]
Generate pointsSortedByX[]
Apply recursive_algorithm ...

recursive_algorithm:
Divide sorted point set into two sets
For first set:
    If set is sufficiently small, find closest point pair
    Otherwise, apply recursive algorithm on set
For second set:
    If set is sufficiently small, find closest point pair
    Otherwise, apply recursive algorithm on set
Using best point pair from first and second sets, create middle set of points whose width is twice closest distance
Find closest point pair in middle set
Keep best point pair from first, second, and middle sets and return it
